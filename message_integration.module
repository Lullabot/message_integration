<?php

/**
 * @file
 * Holds hook implementation for the Custom Message Integration module.
 */

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\comment\Entity\Comment;
use Drupal\user\Entity\User;
use Drupal\message\Entity\Message;
use Drupal\message_subscribe\Subscribers\DeliveryCandidate;
use Drupal\Core\Asset\AttachedAssets;
use TijsVerkoyen\CssToInlineStyles\CssToInlineStyles;

/**
 * The content types whose changes should generate messages.
 */
define('MESSAGE_INTEGRATION_CONTENT_TYPES', ['blog', 'book_page', 'yammer']);

/**
 * Implemenation of hook_form_BASE_FORM_ID_alter().
 */
function message_integration_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Provide a notification message for authors so they know what will happen.
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    $entity = $form_object->getEntity();
    if (in_array($entity->bundle(), MESSAGE_INTEGRATION_CONTENT_TYPES)) {
      // Add reminders about which actions will send messages.
      $form['title']['#suffix'] = '<div class="notification-message">' .
        t("Message notification is enabled.") . " " .
        t("Active users will automatically be subscribed to new content, and may choose to unsubscribe at any time.") . " " .
        t("Subscribers will automatically be notified when content is published, when new revisions are created, and when comments are added.") .
        '</div>';
    }
  }
}

/**
 * Get css for the mailed messages.
 *
 * CSS is the same for all messages, so cache it.
 *
 * @return string
 *   A string containing an aggregate of all css on all mail-related libraries.
 */
function message_integration_css() {
  $cid = 'message_integration_css';
  $css = NULL;
  if ($cache = \Drupal::cache()->get($cid)) {
    $css = $cache->data;
  }
  else {
    // Mail and Swiftmail ignore libraries when rendering messages. Our messages
    // represent nodes and comments, and we need libraries for the HTML messages
    // to look right. So we identify css libraries needed for email and attach
    // them here.
    $assets = AttachedAssets::createFromRenderArray([
      '#attached' => [
        'library' => [
          'core/normalize',
          'basis/global-styling',
          'basis_dr/global-styling',
          'basis_mail/global-styling',
          'diff/diff.single_column',
          'diff/diff.colors',
          'diff/diff.general',
        ],
      ],
    ]);

    $assetResolver = \Drupal::service('asset.resolver');
    $fileSystem = \Drupal::service('file_system');
    foreach ($assetResolver->getCssAssets($assets, FALSE) as $css_asset) {
      $css .= file_get_contents($fileSystem->realpath($css_asset['data']));
    }
    \Drupal::cache()->set($cid, $css);
  }
  return $css;
}

/**
 * Implements hook_message_view_alter().
 */
function message_integration_message_view_alter(array &$build) {
  $build['#post_render'][] = 'message_integration_post_render';
}

/**
 * Post render callback.
 *
 * @param string $text
 *   The rendered text.
 * @param array $context
 *   Context for the rendered content.
 *
 * @return string
 *   The altered text.
 */
function message_integration_post_render($text, array $context) {

  // For email we don't want linked css files in the HEAD of the page, we
  // want css to be inlined into the body. So we construct a single string of
  // css, then use CssToInlineStyles() to render that css inline in the markup.
  if ($css = message_integration_css()) {
    $text = (new CssToInlineStyles())->convert($text, $css);
  }

  return $text;
}

/**
 * Implements hook_preprocess_field().
 */
function message_integration_preprocess_field(&$variables) {
  // When rendering comments in the `message` view mode used for email, hide
  // the new comment form.
  $element = $variables['element'];
  if ($element['#field_type'] == 'comment') {
    if ($variables['element']['#view_mode'] == 'message') {
      unset($variables['comment_form']);
    }
  }
}

/**
 * Implements hook_message_subscribe_get_subscribers_alter().
 */
function message_integration_message_subscribe_get_subscribers_alter(array &$uids, array $values) {
  // Update each subscriber to use the only available delivery method, email.
  // This is an easier alternative to using the message_subscribe_email module
  // which requires every user to set both a 'subscribe' flag and also an
  // 'email' flag on each item they want to subscribe to.
  foreach ($uids as $uid => $delivery_candidate) {
    $delivery_candidate->addNotifier('email');
  }
  return $uids;
}

/**
 * Implements hook_node_insert().
 */
function message_integration_node_insert(Node $node) {

  if (!in_array($node->bundle(), MESSAGE_INTEGRATION_CONTENT_TYPES)) {
    return;
  }

  $subscribers = \Drupal::service('message_subscribe.subscribers');

  // Automatically subscribe all active users to new content. They can
  // unsubscribe later if they want to. This is one work-around to the fact
  // that nobody can subscribe to content until it's published, so they won't
  // otherwise get notified about new content. If a user account is later
  // blocked, all flags will be removed by Flag module, so it's safe to set
  // flags here for all currently active users.
  $query = \Drupal::entityQuery('user')
    ->condition('status', 1)
    ->condition('uid', [0, 1], 'NOT IN');
  $uids = $query->execute();
  $users = User::loadMultiple($uids);

  // Add a content subscription flag for each user.
  // If there are a lot of users this should probably be queued, which would
  // require more custom code. For now we'll assume the list is a manageable
  // size.
  $flag_service = \Drupal::service('flag');
  $flag_id = 'subscribe_node';
  $flag = $flag_service->getFlagById($flag_id);
  foreach ($users as $account) {
    // Check if already flagged to avoid exception error.
    $flagging = $flag_service->getFlagging($flag, $node, $account);
    if (!$flagging) {
      $flag_service->flag($flag, $node, $account);
    }
  }

  // Create a message.
  $template = $node->isPublished() ? 'publish_node' : 'create_node';
  $message = Message::create(['template' => $template, 'uid' => $node->getOwnerId()]);
  $message->set('field_node_reference', $node);
  $message->set('field_published', $node->isPublished());
  $message->save();

  // Queue messages to notify all the node subscribers about published node.
  if ($node->isPublished()) {
    $subscribers->sendMessage($node, $message);
  }

}

/**
 * Implements hook_node_update().
 */
function message_integration_node_update(Node $node) {
  if (!in_array($node->bundle(), MESSAGE_INTEGRATION_CONTENT_TYPES)) {
    return;
  }

  $subscribers = \Drupal::service('message_subscribe.subscribers');

  // Match publication status of message to status of source entity.
  message_integration_update_message_status($node);

  // See if this is a newly-published node.
  if ($node->isPublished() && !empty($node->original) && !$node->original->isPublished()) {
    $template = 'publish_node';
    $newly_published = TRUE;
  }
  else {
    $template = 'update_node';
    $newly_published = FALSE;
  }

  // See if this is a new revision and whether anything changed.
  $langcode = $node->language()->getId();
  $new_vid = $node->vid->value;
  if ($node->hasTranslation($langcode) && !$node->getTranslation($langcode)->isRevisionTranslationAffected()) {
    // If nothing changed, the system won't treat this as a new revision.
    $original_vid = $new_vid;
    $new_revision = FALSE;
  }
  else {
    $original_vid = !empty($node->original) ? $node->original->vid->value : $node->vid->value;
    $new_revision = $original_vid != $new_vid ? TRUE : FALSE;
  }
  // If this is a new revision where nothing changed and it wasn't published,
  // skip message altogether.
  if (!$new_revision && !$newly_published) {
    return;
  }

  // Create a message.
  $message = Message::create([
    'template' => $template,
    'uid' => $node->getOwnerId(),
  ]);
  $message->set('field_node_reference', $node);
  $message->set('field_published', $node->isPublished());

  // Store original and current vids, so the right diff can be shown in the
  // node-diff token.
  if ($message->hasField('field_new_vid')) {
    $message->set('field_new_vid', $new_vid);
  }
  if ($message->hasField('field_original_vid')) {
    $message->set('field_original_vid', $original_vid);
  }
  $message->save();

  $subscribers->sendMessage($node, $message);

}

/**
 * Implements hook_comment_insert().
 */
function message_integration_comment_insert(Comment $comment) {
  $subscribers = \Drupal::service('message_subscribe.subscribers');

  $node = $comment->get('entity_id')->first()->get('entity')->getTarget()->getValue();
  if (!in_array($node->bundle(), MESSAGE_INTEGRATION_CONTENT_TYPES)) {
    return;
  }

  // Create a message.
  $message = Message::create([
    'template' => 'create_comment',
    'uid' => $node->getOwnerId(),
  ]);
  $message->set('field_comment_reference', $comment);
  $message->set('field_published', $comment->isPublished());
  $message->save();

  // Queue messages to notify all the node subscribers about new comment.
  $subscribers->sendMessage($comment, $message);

}

/**
 * Implements hook_user_insert().
 */
function message_integration_user_insert(User $account) {
  $subscribers = \Drupal::service('message_subscribe.subscribers');

  // Create a custom subscriber list to notify administrators about new users.
  // This is an end run around the normal flag subscription system since we
  // don't want to subscribe to users but we do want administrators notified.
  $subscribe_options = message_integration_subscriber_list_by_roles(['admin']);

  // Queue messages to our custom list of subscribers.
  $message = Message::create(['template' => 'user_register', 'uid' => $account->id()]);
  $message->set('field_user', $account);
  $message->set('field_published', $account->isActive());
  $message->save();

  $subscribers->sendMessage($account, $message, [], $subscribe_options);
}

/**
 * Helper to create custom subscriber list.
 *
 * Hard-coding 'uids' in $subscribe_options will cause message_subscribe to
 * skip other subscribers and send to just this list, so this allows us
 * to create a custom subscription list.
 *
 * @param array $roles
 *   Array of roles to search for.
 *
 * @return array
 *   Array of subscribe_options to use when sending the message.
 */
function message_integration_subscriber_list_by_roles(array $roles = ['admin']) {
  $query = \Drupal::entityQuery('user')
    ->condition('status', 1);
  $query->condition('roles', $roles, 'IN');
  $admin_uids = $query->execute();

  $notifiers = ['email'];
  $subscribe_options = [
    'notify message owner' => FALSE,
    'uids' => [],
  ];
  foreach ($admin_uids as $uid) {
    $subscribe_options['uids'][$uid] = new DeliveryCandidate([], $notifiers, $uid);
  }
  return $subscribe_options;
}

/**
 * Set message entity published field when it changes in the related entity.
 *
 * @param \Drupal\Core\Entity\ContentEntityBase $entity
 *   The entity object.
 */
function message_integration_update_message_status(ContentEntityBase $entity) {

  if (!empty($entity->original) && $entity->isPublished() == $entity->original->isPublished()) {
    return;
  }
  $query = \Drupal::entityQuery('message');
  $field = 'field_' . $entity->getEntityType()->id() . '_reference';
  $query->condition($field . '.target_id', $entity->id());

  $results = $query->execute();
  if (empty($results)) {
    return;
  }
  $messages = Message::loadMultiple($results);
  foreach ($messages as $message) {
    $message->set('field_published', $entity->isPublished());
    $message->save();
  }
}
